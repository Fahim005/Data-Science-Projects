mutate_if(is.character, as.factor) %>%
mutate(across(where(is.factor), ~ as.integer(factor(.))))
View(hcv)
scale(hcv)
str(hcv)
correlation_matrix <- cor(hcv[, 3:ncol(hcv)], hcv$Category)
hcv
correlation_matrix <- cor(hcv[, 5:14], hcv$Category)
hcv
library(class, lib.loc = "C:/Program Files/R/R-4.3.0/library")
correlation_matrix <- cor(hcv[, 3:ncol(hcv)], hcv$Category)
hcv
install.packages("corrplot")
library(corrplot)
correlation_matrix <- cor(hcv[, 2:ncol(hcv)], hcv$Category)
hcv
corrplot(correlation_matrix, method = "color")
correlation_matrix <- cor(hcv[, 3:ncol(hcv)], hcv$Category)
corrplot(correlation_matrix, method = "color")
hcv
corrplot(correlation_matrix, method = "color")
corrplot.mixed(correlation_matrix, upper = "triangle")
correlation_matrix <- cor(hcv[, 3:ncol(hcv)], hcv$Category)
hcv
corrplot.mixed(correlation_matrix, upper = "triangle")
hcv <- read.csv("D:/hcvdata.csv",header = TRUE,sep = ",")
hcv
View(hcv)
head(hcv)
tail(hcv)
summary(hcv)
null_values <- sapply(hcv, function(x) sum(is.na(x)))
null_values
missing_values <- colSums(is.na(hcv))
print(missing_values)
hcv <- hcv %>%
mutate_at(vars(ALB:PROT), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)) %>%
mutate(Category = ifelse(is.na(Category), mode(Category, na.rm = TRUE), Category))
View(hcv)
missing_values <- colSums(is.na(hcv))
print(missing_values)
hcv <- hcv %>%
mutate_if(is.character, as.factor) %>%
mutate(across(where(is.factor), ~ as.integer(factor(.))))
View(hcv)
scale(hcv)
correlation_matrix <- cor(hcv[, 3:ncol(hcv)], hcv$Category)
hcv
corrplot.mixed(correlation_matrix, upper = "triangle")
corrplot.mixed(correlation_matrix, lower = "number", upper = "ellipse")
correlation_matrix <- cor(hcv[, 3:ncol(hcv)], hcv$Category)
corrplot.mixed(correlation_matrix, order = "hclust", lower = "ellipse")
hcv
corrplot.mixed(correlation_matrix, order = "hclust", lower = "ellipse")
correlation_matrix <- cor(hcv[, 2:ncol(hcv)], hcv$Category)
corrplot.mixed(correlation_matrix, order = "hclust", lower = "ellipse"
hcv
correlation_matrix <- cor(hcv[, 2:ncol(hcv)], hcv$Category)
hcv
corrplot.mixed(correlation_matrix, order = "hclust", lower = "ellipse")
corrplot.mixed(correlation_matrix, order = "hclust", lower = "ellipse")
corrplot.mixed(correlation_matrix, lower = "number", upper = "ellipse")
corrplot(correlation_matrix, type = "upper", order = "hclust", tl.pos = "d")
install.packages("networkD3")
library(networkD3)
cor_data <- as.data.frame(as.table(correlation_matrix))
correlation_matrix <- cor(hcv[, 2:ncol(hcv)], hcv$Category)
hcv
cor_data <- as.data.frame(as.table(correlation_matrix))
hcv
correlation_matrix <- cor(hcv[, 2:ncol(hcv)], hcv$Category)
hcv
corrplot(correlation_matrix, method = "number", type = "upper")
install.packages("qgraph")
library(qgraph)
correlation_matrix <- cor(hcv[, 5:14], use = "pairwise.complete.obs")
# Create a triangular graph using qgraph
qgraph::qgraph(correlation_matrix, layout = "spring", legend = TRUE, borders = TRUE)
correlation_matrix <- cor(hcv[, 2:ncol(hcv)], hcv$Category)
hcv
corrplot(correlation_matrix, method = "color")
correlation_matrix <- cor(hcv[, 5:ncol(hcv)], hcv$Category)
hcv
corrplot(correlation_matrix, method = "color")
correlation_matrix <- cor(hcv[, 14:ncol(hcv)], hcv$Category)
hcv
corrplot(correlation_matrix, method = "color")
corrplot(correlation_matrix, method = "color")
correlation_matrix <- cor(hcv[, 3:ncol(hcv)], hcv$Category)
corrplot(correlation_matrix, method = "color")
correlation_matrix <- cor(hcv[, 2:ncol(hcv)], hcv$Category)
corrplot(correlation_matrix, method = "color")
correlation_matrix <- cor(hcv[, 3:ncol(hcv)], hcv$Category)
correlation_matrix <- cor(hcv[, 3:ncol(hcv)], hcv$Category)
corrplot(correlation_matrix, method = "color")
correlation_matrix <- cor(hcv[, 6:ncol(hcv)], hcv$Category)
corrplot(correlation_matrix, method = "color")
correlation_matrix <- cor(hcv[, 2:ncol(hcv)], hcv$Category)
corrplot(correlation_matrix, method = "color")
correlation_threshold <- 0.2
important_attributes <- names(hcv[, 2:ncol(hcv)])[apply(correlation_matrix, 1, function(x) any(abs(x) > correlation_threshold))]
important_att <- hcv %>% select(all_of(c(important_attributes, "Category")))
important_att
important_attributes
important_att
set.seed(123)  # For reproducibility
train_size <- 0.8  # Percentage of data for training
train_index <- sample(nrow(important_att), round(train_size * nrow(important_att)))
train_hcv <- important_att[train_index, ]
test_hcv <- important_att[-train_index, ]
train_features <- train_hcv[, -ncol(train_hcv)]
train_labels <- train_hcv$Category
test_features <- test_hcv[, -ncol(test_hcv)]
test_labels <- test_hcv$Category
k <- 3
knn_pred <- knn(train_features, test_features, train_labels, k)
knn_pred
accuracy <- sum(knn_pred == test_labels) / length(test_labels)
print(paste("Accuracy (Training/Test Set Approach):", accuracy))
knn_cv <- knn.cv(important_att[, -ncol(important_att)], important_att$Category, k = k)
accuracy_cv <- sum(knn_cv == important_att$Category) / length(important_att$Category)
print(paste("Accuracy (10-Fold Cross Validation):", accuracy_cv))
conf_matrix <- table(knn_cv, important_att$Category)
recall <- conf_matrix[2, 2] / sum(conf_matrix[2, ])
precision <- conf_matrix[2, 2] / sum(conf_matrix[, 2]
print("Confusion Matrix:")
recall <- conf_matrix[2, 2] / sum(conf_matrix[2, ])
precision <- conf_matrix[2, 2] / sum(conf_matrix[, 2])
print("Confusion Matrix:")
print(conf_matrix)
print(paste("Recall:", recall))
print(paste("Precision:", precision))
hcv <- read.csv("D:/hcvdata.csv",header = TRUE,sep = ",")
hcv
str(hcv)
hcv <- read.csv("D:/hcvdata.csv",header = TRUE,sep = ",")
hcv
View(hcv
str(hcv)
hcv <- read.csv("D:/hcvdata.csv",header = TRUE,sep = ",")
hcv
str(hcv)
head(hcv)
tail(hcv)
summary(hcv)
missing_values <- colSums(is.na(hcv))
print(missing_values)
hcv <- hcv %>%
mutate_at(vars(ALB:PROT), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)) %>%
mutate(Category = ifelse(is.na(Category), mode(Category, na.rm = TRUE), Category))
View(hcv)
hcv <- hcv %>%
mutate_at(vars(ALB:PROT), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)) %>%
mutate(Category = ifelse(is.na(Category), mode(Category, na.rm = TRUE), Category))
hcv <- hcv %>%
mutate_at(vars(ALB:PROT), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)) %>%
mutate(Category = ifelse(is.na(Category), mode(Category, na.rm = TRUE), Category))
View(hcv)
missing_values <- colSums(is.na(hcv))
print(missing_values)
hcv <- hcv %>%
mutate_if(is.character, as.factor) %>%
mutate(across(where(is.factor), ~ as.integer(factor(.))))
View(hcv)
scale(hcv)
correlation_matrix <- cor(hcv[, 2:ncol(hcv)], hcv$Category)
hcv
corrplot(correlation_matrix, method = "color")
correlation_threshold <- 0.2
important_attributes <- names(hcv[, 2:ncol(hcv)])[apply(correlation_matrix, 1, function(x) any(abs(x) > correlation_threshold))]
important_attributes
important_att <- hcv %>% select(all_of(c(important_attributes, "Category")))
important_att
set.seed(123)
train_size <- 0.8
train_index <- sample(nrow(important_att), round(train_size * nrow(important_att)))
train_hcv <- important_att[train_index, ]
test_hcv <- important_att[-train_index, ]
train_features <- train_hcv[, -ncol(train_hcv)]
train_labels <- train_hcv$Category
test_features <- test_hcv[, -ncol(test_hcv)]
test_labels <- test_hcv$Category
k <- 3
knn_pred <- knn(train_features, test_features, train_labels, k)
knn_pred
accuracy <- sum(knn_pred == test_labels) / length(test_labels)
print(paste("Accuracy (Training/Test Set Approach):", accuracy))
knn_cv <- knn.cv(important_att[, -ncol(important_att)], important_att$Category, k = k)
accuracy_cv <- sum(knn_cv == important_att$Category) / length(important_att$Category)
print(paste("Accuracy (10-Fold Cross Validation):", accuracy_cv))
conf_matrix <- table(knn_cv, important_att$Category)
conf_matrix <- table(knn_cv, important_att$Category)
conf_matrix
recall <- conf_matrix[2, 2] / sum(conf_matrix[2, ])
recall
precision <- conf_matrix[2, 2] / sum(conf_matrix[, 2])
precision
print("Confusion Matrix:")
print(conf_matrix)
print(paste("Recall:", recall))
print(paste("Precision:", precision))
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
corrplot(correlation_matrix, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45
corrplot(correlation_matrix, type = "upper", order = "hclust",
corrplot(correlation_matrix, type = "upper", order = "hclust",
tl.col = "black",tl.srt = 45)
correlation_matrix <- cor(hcv[, 2:ncol(hcv)], hcv$Category)
hcv
correlation_matrix <- cor(hcv[, 2:ncol(hcv)], hcv$Category)
correlation_matrix
corrplot(correlation_matrix, type = "upper", order = "hclust",
tl.col = "black",tl.srt = 45)
corrplot(correlation_matrix, type = "upper", order = "hclust",
tl.col = "black",tl.srt = 18)
corrplot(correlation_matrix, type = "upper", order = "hclust",
hcv$Category = "black",ncol(hcv) = 18)
correlation_matrix <- cor(hcv[, 2:ncol(hcv)], hcv$Category)
correlation_matrix
corrplot(correlation_matrix, type="upper")
corrplot(correlation_matrix, type="upper", order="hclust",
p.mat = p.mat, sig.level = 0.01, insig = "blank")
corrplot(correlation_matrix, type="lower")
corrplot(correlation_matrix, type="Upper")
corrplot(correlation_matrix, type="upper")
correlation_matrix <- cor(hcv[, 2:ncol(hcv)], hcv$Category)
correlation_matrix
correlation_matrix <- cor(hcv[, 5:ncol(hcv)], hcv$Category)
correlation_matrix
correlation_matrix <- cor(hcv[, 4:ncol(hcv)], hcv$Category)
correlation_matrix
corrplot(correlation_matrix, method = "color", order = "hclust", type = "upper")
corrplot(correlation_matrix, method = "color", order = "hclust", type = "upper")
corrplot(correlation_matrix, method = "color")
conf_matrix <- table(knn_cv, important_att$Category)
conf_matrix
corrplot(conf_matrix, method = "color", order = "hclust", type = "upper")
hcv <- read.csv("D:/hcvdata.csv",header = TRUE,sep = ",")
hcv
View(hcv)
str(hcv)
head(hcv)
head(hcv,3)
tail(hcv)
tail(hcv,2)
summary(hcv)
missing_values <- colSums(is.na(hcv))
print(missing_values)
summary(hcv)
missing_values <- colSums(is.na(hcv))
print(missing_values)
missing_values <- colSums(is.na(hcv))
print(missing_values)
missing_values <- colSums(is.na(hcv))
print(missing_values)
hcv <- hcv %>%
mutate_at(vars(ALB:PROT), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)) %>%
mutate(Category = ifelse(is.na(Category), mode(Category, na.rm = TRUE), Category))
missing_values <- colSums(is.na(hcv))
print(missing_values)
hcv <- hcv %>%
mutate_if(is.character, as.factor) %>%
mutate(across(where(is.factor), ~ as.integer(factor(.))))
View(hcv)
correlation_matrix <- cor(hcv[, 2:ncol(hcv)], hcv$Category)
correlation_matrix
hcv <- read.csv("D:/hcvdata.csv",header = TRUE,sep = ",")
hcv
correlation_matrix <- cor(hcv[, 2:ncol(hcv)], hcv$Category)
missing_values <- colSums(is.na(hcv))
print(missing_values)
hcv <- hcv %>%
mutate_at(vars(ALB:PROT), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)) %>%
mutate(Category = ifelse(is.na(Category), mode(Category, na.rm = TRUE), Category))
mutate_if(is.character, as.factor) %>%
mutate(across(where(is.factor), ~ as.integer(factor(.))))
numeric_columns <- sapply(dataset, is.numeric)
numeric_columns <- sapply(hcv, is.numeric)
correlation_matrix <- cor(hcv[, numeric_columns])
print(correlation_matrix)
corrplot(correlation_matrix, method = "color")
corrplot(correlation_matrix, method = "color", order = "hclust", type = "upper")
corrplot(correlation_matrix, type="upper")
corrplot(correlation_matrix, method = "color")
correlation_threshold <- 0.2
important_attributes <- names(hcv[, 2:ncol(hcv)])[apply(correlation_matrix, 1, function(x) any(abs(x) > correlation_threshold))]
important_attributes
important_att <- hcv %>% select(all_of(c(important_attributes, "Category")))
important_att
important_att <- hcv %>% select(all_of(c(important_attributes, "Category")))
important_att
important_attributes
important_att <- hcv %>% select(all_of(c(important_attributes, "Category")))
important_att
set.seed(123)
train_size <- 0.8
train_index <- sample(nrow(important_att), round(train_size * nrow(important_att)))
train_hcv <- important_att[train_index, ]
test_hcv <- important_att[-train_index, ]
train_features <- train_hcv[, -ncol(train_hcv)]
train_labels <- train_hcv$Category
test_features <- test_hcv[, -ncol(test_hcv)]
test_labels <- test_hcv$Category
k <- 3
knn_pred <- knn(train_features, test_features, train_labels, k)
hcv <- read.csv("D:/hcvdata.csv",header = TRUE,sep = ",")
hcv
str(hcv)
summary(hcv)
missing_values <- colSums(is.na(hcv))
print(missing_values)
hcv <- hcv %>%
mutate_at(vars(ALB:PROT), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)) %>%
mutate(Category = ifelse(is.na(Category), mode(Category, na.rm = TRUE), Category))
missing_values <- colSums(is.na(hcv))
print(missing_values)
hcv <- hcv %>%
mutate_if(is.character, as.factor) %>%
mutate(across(where(is.factor), ~ as.integer(factor(.))))
View(hcv)
scale(hcv)
str(hcv)
numeric_columns <- sapply(hcv, is.numeric)
correlation_matrix <- cor(hcv[, numeric_columns])
print(correlation_matrix)
corrplot(correlation_matrix, method = "color")
corrplot(correlation_matrix, method = "color", order = "hclust", type = "upper")
correlation_threshold <- 0.2
important_attributes <- names(hcv[, 2:ncol(hcv)])[apply(correlation_matrix, 1, function(x) any(abs(x) > correlation_threshold))]
important_attributes
important_att <- hcv %>% select(all_of(c(important_attributes, "Category")))
scale(hcv)
str(hcv)
correlation_matrix <- cor(hcv[, 1:ncol(hcv)], hcv$Category)
correlation_matrix
hcv
corrplot(correlation_matrix, method = "color")
scale(hcv)
numeric_columns <- sapply(hcv, is.numeric)
correlation_matrix <- cor(hcv[, numeric_columns])
print(correlation_matrix)
corrplot(correlation_matrix, method = "color")
corrplot(correlation_matrix, method = "color", order = "hclust", type = "upper")
abs_corr_values <- abs(correlation_matrix)
mean_abs_corr <- colMeans(abs_corr_values)
sorted_attributes <- names(mean_abs_corr[order(-mean_abs_corr)])
sorted_attributes
important_att <- hcv %>% select(all_of(c(sorted_attributes, "Category")))
important_att
sorted_attributes
scale(hcv)
numeric_columns <- sapply(hcv, is.numeric)
correlation_matrix <- cor(hcv[, numeric_columns])
print(correlation_matrix)
corrplot(correlation_matrix, method = "color")
corrplot(correlation_matrix, method = "color", order = "hclust", type = "upper")
highly_correlated <- findCorrelation(correlation_matrix, cutoff = 0.7)
print(correlation_matrix)
highly_correlated <- findCorrelation(correlation_matrix, cutoff = 0.7)
correlation_threshold <- 0.2
important_attributes <- names(hcv[, 2:ncol(hcv)])[apply(correlation_matrix, 1, function(x) any(abs(x) > correlation_threshold))]
important_attributes
important_att <- hcv %>% select(all_of(c(important_attributes, "Category")))
rlang::last_trace()
important_att <- hcv %>% select.,all_of(c(important_attributes, "Category")))
important_att <- hcv %>% select.all_of(c(important_attributes, "Category")))
important_att <- hcv %>% select(all_of(c(important_attributes, "Category")))
important_att <- hcv %>% select(.,all_of(c(important_attributes, "Category")))
rlang::last_trace()
important_att <- hcv %>% select(all_of(c(important_attributes, "Category")))
correlation_threshold <- 0.2
important_attributes <- names(hcv[, 2:ncol(hcv)])[apply(correlation_matrix, 1, function(x) any(abs(x) > correlation_threshold))]
important_attributes
important_att <- hcv %>% select(all_of(c(important_attributes, "Category")))
correlation_matrix <- cor(hcv[, 1:ncol(hcv)], hcv$Category)
correlation_matrix
numeric_columns <- sapply(hcv, is.numeric)
correlation_matrix <- cor(hcv[, numeric_columns])
print(correlation_matrix)
scale(hcv
scale(hcv)
hcv <- read.csv("D:/hcvdata.csv",header = TRUE,sep = ",")
hcv
missing_values <- colSums(is.na(hcv))
print(missing_values)
hcv <- hcv %>%
mutate_at(vars(ALB:PROT), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)) %>%
mutate(Category = ifelse(is.na(Category), mode(Category, na.rm = TRUE), Category))
hcv <- hcv %>%
mutate_if(is.character, as.factor) %>%
mutate(across(where(is.factor), ~ as.integer(factor(.))))
scale(hcv)
correlation_matrix <- cor(data)
correlation_matrix <- cor(hcv)
correlation_matrix
correlation_matrix <- cor(hcv[, 1:ncol(hcv)], hcv$Category)
correlation_matrix
correlation_matrix <- cor(hcv[, 5:ncol(hcv)], hcv$Category)
correlation_matrix
correlation_matrix <- cor(hcv)
correlation_matrix
corrplot(correlation_matrix, method = "color")
corrplot(correlation_matrix, method = "color", order = "hclust", type = "upper")
important_attributes <- colnames(correlation_matrix)[apply(correlation_matrix, 2, function(col) any(abs(col) > correlation_threshold))]
important_attributes
data_subset <- hcv[, important_attributes]
data_subset
correlation_matrix <- cor(hcv[, 5:ncol(hcv)], hcv$Category)
correlation_matrix
correlation_threshold <- 0.2
important_attributes <- names(hcv[, 2:ncol(hcv)])[apply(correlation_matrix, 1, function(x) any(abs(x) > correlation_threshold))]
important_attributes
important_att <- hcv %>% select(all_of(c(important_attributes, "Category")))
important_att
set.seed(123)
train_size <- 0.8
train_index <- sample(nrow(important_att), round(train_size * nrow(important_att)))
train_hcv <- important_att[train_index, ]
test_hcv <- important_att[-train_index, ]
train_features <- train_hcv[, -ncol(train_hcv)]
train_labels <- train_hcv$Category
test_features <- test_hcv[, -ncol(test_hcv)]
test_labels <- test_hcv$Category
k <- 3
knn_pred <- knn(train_features, test_features, train_labels, k)
knn_pred
accuracy <- sum(knn_pred == test_labels) / length(test_labels)
print(paste("Accuracy (Training/Test Set Approach):", accuracy))
knn_cv <- knn.cv(important_att[, -ncol(important_att)], important_att$Category, k = k)
accuracy_cv <- sum(knn_cv == important_att$Category) / length(important_att$Category)
print(paste("Accuracy (10-Fold Cross Validation):", accuracy_cv))
conf_matrix <- table(knn_cv, important_att$Category)
conf_matrix
recall <- conf_matrix[2, 2] / sum(conf_matrix[2, ])
recall
precision <- conf_matrix[2, 2] / sum(conf_matrix[, 2])
precision
print("Confusion Matrix:")
print(conf_matrix)
print(paste("Recall:", recall))
print(paste("Precision:", precision))
print("Confusion Matrix:")
print(conf_matrix)
print(paste("Recall:", recall))
print(paste("Precision:", precision))
corrplot(correlation_matrix, method = "color")
correlation_matrix <- cor(hcv)
correlation_matrix
corrplot(correlation_matrix, method = "color")
corrplot(correlation_matrix, method = "color", order = "hclust", type = "upper")
hcv <- read.csv("D:/hcvdata.csv",header = TRUE,sep = ",")
hcv
View(hcv)
str(hcv)
summary(hcv)
missing_values <- colSums(is.na(hcv))
print(missing_values)
missing_values <- colSums(is.na(hcv))
print(missing_values)
mutate_at(vars(ALB:PROT), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)) %>%
mutate(Category = ifelse(is.na(Category), mode(Category, na.rm = TRUE), Category))
hcv <- hcv %>%
mutate_at(vars(ALB:PROT), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)) %>%
mutate(Category = ifelse(is.na(Category), mode(Category, na.rm = TRUE), Category))
missing_values <- colSums(is.na(hcv))
print(missing_values)
hcv <- hcv %>%
mutate_if(is.character, as.factor) %>%
mutate(across(where(is.factor), ~ as.integer(factor(.))))
scale(hcv)
correlation_matrix <- cor(hcv)
correlation_matrix
corrplot(correlation_matrix, method = "color")
correlation_matrix <- cor(hcv[, 5:ncol(hcv)], hcv$Category)
correlation_matrix
correlation_threshold <- 0.2
important_attributes <- names(hcv[, 2:ncol(hcv)])[apply(correlation_matrix, 1, function(x) any(abs(x) > correlation_threshold))]
important_attributes
correlation_matrix
correlation_matrix <- cor(hcv[, 5:ncol(hcv)], hcv$Category)
correlation_matrix
hcv <- read.csv("D:/hcvdata.csv",header = TRUE,sep = ",")
hcv
missing_values <- colSums(is.na(hcv))
print(missing_values)
hcv <- hcv %>%
mutate_at(vars(ALB:PROT), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)) %>%
mutate(Category = ifelse(is.na(Category), mode(Category, na.rm = TRUE), Category))
hcv <- hcv %>%
mutate_if(is.character, as.factor) %>%
mutate(across(where(is.factor), ~ as.integer(factor(.))))
scale(hcv)
str(hcv)
correlation_matrix <- cor(hcv)
correlation_matrix
corrplot(correlation_matrix, method = "color")
important_att <- hcv %>% select(all_of(c(important_attributes, "Category")))
important_att
set.seed(123)
train_size <- 0.8
train_index <- sample(nrow(important_att), round(train_size * nrow(important_att)))
train_hcv <- important_att[train_index, ]
test_hcv <- important_att[-train_index, ]
train_features <- train_hcv[, -ncol(train_hcv)]
train_labels <- train_hcv$Category
test_features <- test_hcv[, -ncol(test_hcv)]
test_labels <- test_hcv$Category
k <- 3
knn_pred <- knn(train_features, test_features, train_labels, k)
knn_pred
source("C:/Users/HP/Desktop/Data Science/Final_Project/20-43149-1_HCV_Data-Work.R", echo=TRUE)
